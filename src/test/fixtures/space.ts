import { nanoid } from "nanoid";
import type { Prisma } from "@/generated/prisma";
import { prisma } from "@/lib/prisma";

/**
 * Space test fixtures and helpers
 */

export interface CreateSpaceParams {
  userId: string;
  name?: string;
  description?: string;
  vectorProvider?: "MILVUS";
  vectorConfig?: Record<string, unknown>;
  embeddingModelId?: string;
  embeddingDim?: number;
}

/**
 * Create a test Space with sensible defaults
 * Uses Cohere embed v4.0 with 1536 dimensions by default
 */
export async function createTestSpace(params: CreateSpaceParams) {
  const {
    userId,
    name = `test-space-${nanoid(6)}`,
    description = "Test space for integration testing",
    vectorProvider = "MILVUS",
    vectorConfig = {
      url: process.env.MILVUS_URL,
      token: process.env.MILVUS_TOKEN,
      indexType: "HNSW",
      metricType: "COSINE",
    },
    embeddingModelId = "cohere/embed-v4.0",
    embeddingDim = 1536,
  } = params;

  const space = await prisma.space.create({
    data: {
      name,
      description,
      userId,
      vectorProvider,
      vectorConfig: vectorConfig as unknown as Prisma.InputJsonValue,
      embeddingModelId,
      embeddingDim,
      status: "ACTIVE",
      // Collection name will be regenerated by RAGService using getCollectionName(spaceId)
      // which replaces hyphens with underscores. Store a sanitized placeholder here.
      collectionName: `space_${nanoid(8).replace(/-/g, "_")}`,
    },
    include: {
      embeddingModel: true,
      _count: {
        select: {
          documents: true,
          tags: true,
        },
      },
    },
  });

  return space;
}

/**
 * Clean up a test space and its collection
 */
export async function deleteTestSpace(spaceId: string) {
  await prisma.space.delete({
    where: { id: spaceId },
  });
}

/**
 * Get valid Milvus configuration from environment
 */
export function getMilvusConfig() {
  const url = process.env.MILVUS_URL;
  const token = process.env.MILVUS_TOKEN;

  if (!url || !token) {
    throw new Error(
      "MILVUS_URL and MILVUS_TOKEN environment variables are required",
    );
  }

  return {
    url,
    token,
    indexType: "HNSW",
    metricType: "COSINE",
  };
}

/**
 * Cohere embedding model configurations for testing
 */
export const COHERE_MODELS = {
  EMBED_V4: {
    id: "cohere/embed-v4.0",
    name: "Embed V4.0",
    supportedDimensions: [256, 512, 1024, 1536],
    defaultDimension: 1536,
  },
  EMBED_ENGLISH_V3: {
    id: "cohere/embed-english-v3.0",
    name: "Embed English V3.0",
    supportedDimensions: [1024],
    defaultDimension: 1024,
  },
};
