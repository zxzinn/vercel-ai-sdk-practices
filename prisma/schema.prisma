// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model EmbeddingModel {
  id          String  @id
  name        String
  provider    String
  dimensions  Int[]
  defaultDim  Int
  maxTokens   Int
  costPer1M   Float?
  description String?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  spaces Space[]

  @@index([provider, isActive])
  @@map("embedding_models")
}

model Conversation {
  id        String   @id @default(cuid())
  title     String
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages ConversationMessage[]

  @@index([userId, createdAt])
  @@map("conversations")
}

model ConversationMessage {
  id             String   @id @default(cuid())
  conversationId String
  role           String
  content        Json     @db.JsonB
  createdAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
  @@map("conversation_messages")
}

model Space {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String

  // Vector database configuration
  vectorProvider  VectorProvider @default(MILVUS)
  vectorConfig    Json?          @db.JsonB

  // Embedding configuration (immutable after creation)
  embeddingModelId String
  embeddingModel   EmbeddingModel @relation(fields: [embeddingModelId], references: [id], onUpdate: Restrict)
  embeddingDim     Int

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  documents Document[]
  tags      Tag[]

  @@index([userId, createdAt])
  @@index([vectorProvider])
  @@index([embeddingModelId])
  @@map("spaces")
}

model Document {
  id              String         @id @default(cuid())
  spaceId         String
  fileName        String
  fileType        String
  size            Int
  storageUrl      String
  vectorDocId     String
  collectionName  String
  status          DocumentStatus @default(PROCESSING)
  totalChunks     Int            @default(0)
  uploadedAt      DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  space    Space              @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  metadata DocumentMetadata[]
  tags     DocumentTag[]

  @@index([spaceId, uploadedAt])
  @@index([status])
  @@map("documents")
}

model DocumentMetadata {
  id         String @id @default(cuid())
  documentId String
  key        String
  value      String

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, key])
  @@map("document_metadata")
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  color     String?
  spaceId   String
  createdAt DateTime @default(now())

  space     Space         @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  documents DocumentTag[]

  @@unique([spaceId, name])
  @@map("tags")
}

model DocumentTag {
  documentId String
  tagId      String
  createdAt  DateTime @default(now())

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  tag      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([documentId, tagId])
  @@map("document_tags")
}

enum DocumentStatus {
  UPLOADING
  PROCESSING
  INDEXED
  FAILED
}

enum VectorProvider {
  MILVUS
  PINECONE
  QDRANT
  WEAVIATE
  CHROMA
}
